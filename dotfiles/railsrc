#!/usr/bin/ruby

# Resources
# http://ozmm.org/posts/railsrc.html
# http://rbjl.net/49-railsrc-rails-console-snippets

# Show queries after running AR methods in console.
ActiveRecord::Base.logger = Logger.new(STDOUT)

# View full debug query even if they fail with a StatementInvalid
# error. In the console, we would just see the error message with
# part of the query. By adding another logger to a file, there we
# will see the full debug query with all parameter values.
# Solution: https://stackoverflow.com/a/26704547
ActiveRecord::Base.logger.extend(
  ActiveSupport::Logger.broadcast(
    Logger.new(Rails.root.join('log', 'console.log'))
  )
)

def r
  reload!
end

def clear
  system 'clear'
  return "In #{Rails.env} environment (Rails #{Rails.version})"
end

# Show the date/time format strings defined and example output
# http://www.onrails.org/2008/08/20/what-are-all-the-rails-date-formats
def date_formats
  now = Time.now
  [:to_date, :to_datetime, :to_time].each do |conv_meth|
    obj = now.send(conv_meth)
    puts obj.class.name
    puts "=" * obj.class.name.length
    name_and_fmts = obj.class::DATE_FORMATS.map { |k, v| [k, %Q('#{String === v ? v : '&proc'}')] }
    max_name_size = name_and_fmts.map { |k, _| k.to_s.length }.max + 2
    max_fmt_size = name_and_fmts.map { |_, v| v.length }.max + 1
    name_and_fmts.each do |format_name, format_str|
      puts sprintf("%#{max_name_size}s:%-#{max_fmt_size}s %s", format_name, format_str, obj.to_s(format_name))
    end
    puts
  end
end

def schema(obj)
  y(obj.send(:column_names))
end

def sql(query)
  ActiveRecord::Base.connection.select_all(query)
end

def user(email)
  User.find_by(email: email)
end
